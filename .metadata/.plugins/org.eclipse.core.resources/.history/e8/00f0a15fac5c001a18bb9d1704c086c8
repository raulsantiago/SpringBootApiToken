package raul.carros.api;

import java.net.URI;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.PageRequest;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.annotation.Secured;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;
import raul.carros.domain.Carro;
import raul.carros.domain.CarroService;
import raul.carros.domain.dto.CarroDTO;

@RestController
@RequestMapping("/api/v1/carros")
public class CarrosController {
		
	// Injecaoo de dependencia da classe CarroService
	@Autowired
	private CarroService service;
	
	// ListAll com paginacao
	@GetMapping()
	public ResponseEntity get(@RequestParam(value = "page", defaultValue = "0") Integer page,
							  @RequestParam(value = "size", defaultValue = "10") Integer size) {
		return ResponseEntity.ok(service.getCarros(PageRequest.of(page, size)));
		// Injecao 2
		//return new ResponseEntity<>(service.getCarros(), HttpStatus.OK);
	}	
	
	// Get por Id
	@GetMapping("/{id}")
	public ResponseEntity get(@PathVariable("id") Long id) {
		CarroDTO carro = service.getCarroById(id);
		return ResponseEntity.ok(carro);
		
		
		// Melhor resumo do que com lamdba
		//return carro.map(ResponseEntity::ok).orElse(ResponseEntity.notFound().build());
		
		// Melhor com lamdba
		//return carro.map(c -> ResponseEntity.ok(c)).orElse(ResponseEntity.notFound().build());				
		// Uma Injecao
		//return carro.isPresent() ? ResponseEntity.ok(carro.get()) : ResponseEntity.notFound().build();
	}
	
	
	// Get por tipo
	@GetMapping("/tipo/{tipo}")
	public ResponseEntity getCarroByTipo(@PathVariable("tipo") String tipo) {  
		List<CarroDTO> carros = service.getCarroByTipo(tipo);	
		return carros.isEmpty() ? ResponseEntity.noContent().build() : ResponseEntity.ok(carros);	
	}	
	
	
	private URI getUri(Long id) {
		return ServletUriComponentsBuilder.fromCurrentRequest().path("/{id}")
				.buildAndExpand(id).toUri();
	}
	
	// Get por query de like
	@GetMapping("/search")
	public ResponseEntity search(@RequestParam("query") String query) {
	    List<CarroDTO> carros = service.search(query);
	    return carros.isEmpty() ?
	            ResponseEntity.noContent().build() :
	            ResponseEntity.ok(carros);
	}
	
	// Insert/Create com permissionamento	
	@PostMapping
	@Secured({"ROLE_ADMIN"}) // so usuario amin tem permissao
	public ResponseEntity post(@RequestBody Carro carro ) {	
		
			Carro carroTeste = new Carro();
			
			carroTeste.setNome(carro.getNome());
			carroTeste.setTipo(carro.getTipo());
			
			CarroDTO c = service.insert(carroTeste);
			URI location = getUri(c.getId());
			return ResponseEntity.created(location).build();		
	}
	
	
//	@PostMapping	
//	public ResponseEntity post(@RequestBody Carro carro ) {
//		try {
//			CarroDTO c = service.insert(carro);
//			URI location = getUri(c.getId());
//			return ResponseEntity.created(location).build();
//		} catch (Exception ex) {
//			return ResponseEntity.badRequest().build();
//			
//		}
//	}
	
//	@PostMapping
//	public String post(@RequestBody Carro carro) {
//		Carro c = service.insert(carro);
//		return "Carro salvo" + c.getId();
//	}
	
	
	// Update 
	@PutMapping("/{id}")
	public ResponseEntity put(@PathVariable("id") Long id, @RequestBody Carro carro ) {
		carro.setId(id);
		
		CarroDTO c = service.update(carro, id);		
		return c != null ? ResponseEntity.ok(c) : ResponseEntity.notFound().build();
	}
	
	// Deletar
	@DeleteMapping("/{id}")
	public ResponseEntity delete(@PathVariable("id") Long id) {
		// Versao COM Classe Exeption		
		service.delete(id);		
		return ResponseEntity.ok().build();
		
		// VersÃ£o Sem Classe Exeption
//		boolean ok = service.delete(id);		
//		return ok ? ResponseEntity.ok().build() : ResponseEntity.notFound().build();
		
		
	}
	
	

}
